@charset "UTF-8";
@import "version";
/*!
* Amazing CSS Table Grid
* Create powerful multi-device layouts quickly and easily with this grid system based on the display table CSS property.
*
* @project Amazing CSS Table Grid
* @version #{$grid-version}
* @author Loïc Mazé
* @license MIT Open Source
*/
// Final output generated with : sass table-grid.scss ../css/table-grid.css --style expanded


@import "config";
@import "init-next-css";
$row-class-name: #{$namespace}row;
$gutters-class-name: #{$namespace}row-with-gutters;


// Get the prefix to add for most CSS class names
@function get-col-prefix($col-type) {
    @return #{$namespace}#{$col-type};
}


// Lines ordering
@mixin grid-lines-ordering($col-prefix) {
    .#{$row-class-name} > .#{$col-prefix}-first-line {
        display: table-caption;
        caption-side: top;
    }
    .#{$row-class-name} > .#{$col-prefix}-last-line {
        display: table-caption;
        caption-side: bottom;
    }
}


// Gutters
@mixin grid-gutters($col-type) {    
    .#{$gutters-class-name} {
        width: auto;
        /*! Gutter half width */
        @if $col-type == sm {
            margin-left: -($small-gutter-half-width);
            margin-right: -($small-gutter-half-width);
        } @else if $col-type == md {
            margin-left: -($medium-gutter-half-width);
            margin-right: -($medium-gutter-half-width);
        } @else if $col-type == lg {
            margin-left: -($large-gutter-half-width);
            margin-right: -($large-gutter-half-width);
        } @else if $col-type == xl {
            margin-left: -($xlarge-gutter-half-width);
            margin-right: -($xlarge-gutter-half-width);
        } @else {
            @error "$col-type must be sm, md, lg or xl, but was #{$col-type}.";
        }
    }
    .#{$gutters-class-name} > .#{$row-class-name} > [class*="-col-"] {
        /*! Gutter half width */
        @if $col-type == sm {
            padding-left: $small-gutter-half-width;
            padding-right: $small-gutter-half-width;
        } @else if $col-type == md {
            padding-left: $medium-gutter-half-width;
            padding-right: $medium-gutter-half-width;
        } @else if $col-type == lg {
            padding-left: $large-gutter-half-width;
            padding-right: $large-gutter-half-width;
        } @else if $col-type == xl {
            padding-left: $xlarge-gutter-half-width;
            padding-right: $xlarge-gutter-half-width;
        } @else {
            @error "$col-type must be sm, md, lg or xl, but was #{$col-type}.";
        }
    }
}


// Columns horizontal alignment
@mixin grid-cols-horizontal-align($col-prefix) {
    .#{$col-prefix}-cols-center:before,
    .#{$col-prefix}-cols-center:after,
    .#{$col-prefix}-cols-right:before,
    .#{$col-prefix}-cols-left:after {
        content: "";
        display: table-cell;
    }
    .#{$col-prefix}-cols-horizontal-reset:before,
    .#{$col-prefix}-cols-horizontal-reset:after {
        content: "";
        display: none;
    }
}


// Columns vertical alignment
@mixin grid-cols-vertical-align($col-prefix) {
    .#{$col-prefix}-cols-top > [class*="-col-"] {
        vertical-align: top;
    }
    .#{$col-prefix}-cols-middle > [class*="-col-"] {
        vertical-align: middle;
    }
    .#{$col-prefix}-cols-bottom > [class*="-col-"] {
        vertical-align: bottom;
    }
    .#{$col-prefix}-cols-vertical-reset > [class*="-col-"] {
        vertical-align: baseline;
    }
}


// Specific column vertical alignment
@mixin grid-col-vertical-align($col-prefix) {
    [class*="-col-"].#{$col-prefix}-col-top {
        vertical-align: top;
    }
    [class*="-col-"].#{$col-prefix}-col-middle {
        vertical-align: middle;
    }
    [class*="-col-"].#{$col-prefix}-col-bottom {
        vertical-align: bottom;
    }
    [class*="-col-"].#{$col-prefix}-col-vertical-reset {
        vertical-align: baseline;
    }
}


// Columns visibility
@mixin grid-cols-visibility($col-prefix) {
    .#{$row-class-name} > [class*="#{$col-prefix}-col-hidden"] {
        display: none;
    }
}


// Columns width
@mixin grid-cols-width($col-prefix) {
    .#{$row-class-name} > [class*="#{$col-prefix}-col-size-"] {
        display: table-cell;
    }
    .#{$col-prefix}-col-size-auto {
        width: auto;
    }
    
    @for $col-number from 1 through $number-of-columns {
        .#{$col-prefix}-col-size-#{$col-number} {
            width: percentage(($col-number / $number-of-columns));
        }
    }
}


// Make styles for a type of column
@mixin grid-for-col-type($col-type) {
    $col-prefix: get-col-prefix($col-type);
    // Be careful! The order of inclusion is important
    @include grid-lines-ordering($col-prefix);
    @include grid-gutters($col-type);
    @include grid-cols-horizontal-align($col-prefix);
    @include grid-cols-vertical-align($col-prefix);
    @include grid-col-vertical-align($col-prefix);
    @include grid-cols-visibility($col-prefix);
    @include grid-cols-width($col-prefix);
}


// Grid
@mixin grid() {
    .#{$row-class-name},
    .#{$row-class-name} > *,
    .#{$gutters-class-name} {
        -webkit-box-sizing: border-box;
        -moz-box-sizing: border-box;
        box-sizing: border-box;
    }
    .#{$row-class-name} {
        display: table;
        width: 100%;
        table-layout: fixed;
        border-collapse: collapse;
        border-spacing: 0;
    }
    .#{$row-class-name} > * {
        display: block;
        overflow: hidden;
        word-wrap: break-word;
        -webkit-hyphens: auto;
        -moz-hyphens: auto;
        -ms-hyphens: auto;
        hyphens: auto;
    }
    
    @include grid-for-col-type(sm);
    @media #{$medium-up-media-query} {
        @include grid-for-col-type(md);
    }
    @media #{$large-up-media-query} {
        @include grid-for-col-type(lg);
    }
    @if $use-xl-columns {
        @media #{$xlarge-up-media-query} {
            @include grid-for-col-type(xl);
        }
    }
}


// -- Make all styles for the grid
@include grid();
